#!/usr/bin/env node
'use strict';

var program = require('commander');
var app = require('../');
var rootPath = require('path');
var message = require('../lib/middleware/message');
var watcher = require('watch');
var ngrok = require('../lib/ngrok');
var defValue = {
    port: 3113,
    homepage: 'index',
    isWatching: true,
    reload: 'no',
    log: false,
    ngrok: false,
    ngrokpath: '/usr/bin/ngrok'
};

program
    .version(message.v());

program
    .command('serve [path]')
    .description('\tRun Node Serve Here')
    .option('-l, --log', 'default is no')
    .option('-p, --port <port>', 'startServer port. default port is 3113')
    .option('-m, --main <homepage>', 'index file to start. no extension (html only)')
    .option('-w, --watch', 'watch project root directory for file changes. default is yes')
    .option('-n, --ngrok', 'using ngrok to expose local web server to internet. default is no')
    .option('-N, --ngrok-path <ngrokpath>', 'ngrok binary path. default to /usr/bin/ngrok')
    .option('-s, --subdomain <subdomain>', 'subdomain for ngrok')
    .option('-a, --auth <auth>', 'simple auth for ngrok')
    .action(function (path, program) {

        path === '.' ? path = rootPath.resolve('.') : path;

        var projectPath = rootPath.resolve(process.cwd(), path || '');
        var port = program.port || defValue.port;
        var homepage = program.main || defValue.homepage;
        var isWatching = program.watch || defValue.isWatching;
        var log = program.log || defValue.log;
        var useNgrok = program.ngrok || defValue.ngrok;
        var ngrokPath = program.ngrokpath || defValue.ngrokpath;
        var subdomain = program.subdomain || null;
        var auth = program.auth || '';
        var options = {
                port: port,
                homepage: homepage,
                reload: defValue.reload,
                log: log
            }
        var svh = null;
        var ngrokOptions;

        message.version();

        if (useNgrok) {
            ngrokOptions = {
                'ngrokpath':ngrokPath,
                'port': port,
                'subdomain': subdomain,
                'auth': auth,
                'configdir': projectPath
            };
            ngrok.expose(ngrokOptions);
        }

        if (isWatching) {
            var watcherOptions = {
                ignoreDotFiles: true
            };

            watcher.watchTree(path, watcherOptions, function () {
                if (svh !== null) {
                    console.log('closing server...');
                    svh.close();

                    options["reload"] = "yes";
                    console.log('[' + new Date() + '] starting server...');
                    svh = app.server(path, options, callback_server(options.port));
                    app.setReload(1);

                } else {
                    console.log('[' + new Date() + '] starting server...');

                    options["reload"] = "no";
                    svh = app.server(path, options, callback_server(options.port));
                    app.setReload(0);
                }
            });
        } else {
            svh = app.server(path, options, callback_server(options.port));
        }
    });

program.parse(process.argv);

var callback_server = function (port) {
    console.log('node will serve you at http://localhost:' + port);
};
