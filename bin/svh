#!/usr/bin/env node

'use strict';

const program = require('commander');
const app = require('../');
const rootPath = require('path');
const message = require('../lib/middleware/message');
const watcher = require('watch');
const ngrok = require('../lib/ngrok');
const pathNode = require('path');
const fs = require('fs');
const chalk = require('chalk');

let bin = require('../lib/ngrok/wrapper.js');

let files = [];
let defValue = {
    hostname: 'localhost',
    port: 3113,
    homepage: 'index',
    isWatching: true,
    files: '*',
    log: false,
    ngrok: false,
    ngrokpath: bin.path()
};

program.version(message.v());
program
    .command('serve [path]')
    .description('\tRun Node Serve Here')
    .option('-l, --log', 'default is disabled')
    .option('-d, --domain <domain>', 'domain or domain. default to localhost')
    .option('-p, --port <port>', 'startServer port. default port is 3113')
    .option('-m, --main <homepage>', 'index file to start. no extension (html only)')
    .option('-w, --watch', 'watch project root directory for file changes. default is enabled')
    .option('-f, --files <files>', 'comma separated files extension to watch. default is all file types.')
    .option('-n, --ngrok', 'using ngrok to expose local web server to internet. default is disabled')
    .option('-N, --ngrok-path <ngrokpath>', 'ngrok binary path. default path to /usr/bin/ngrok')
    .option('-s, --subdomain <subdomain>', 'subdomain for ngrok')
    .option('-a, --auth <auth>', 'simple auth for ngrok')
    .action((path, program) => {

        if (!process.argv.slice(3).length) { program.help(); }

        path === '.' ? path = rootPath.resolve('.') : path;

        let projectPath = rootPath.resolve(process.cwd(), path || '');
        let host = program.domain || defValue.hostname;
        let port = program.port || defValue.port;
        let homepage = program.main || defValue.homepage;
        let isWatching = program.watch || defValue.isWatching;
        let log = program.log || defValue.log;
        let useNgrok = program.ngrok || defValue.ngrok;
        let ngrokPath = program.ngrokpath || defValue.ngrokpath;
        let subdomain = program.subdomain || null;
        let auth = program.auth || '';
        let filter = program.files || defValue.files;
        let options = { hostname: host, port: port, homepage: homepage, log: log };
        let svh = null;
        let validFileChanged = false;
        let ngrokOptions;

        message.version();

        if (useNgrok) {
            ngrokOptions = { 'ngrokpath': ngrokPath, 'port': port, 'subdomain': subdomain, 'auth': auth, 'configdir': projectPath };
            ngrok.expose(ngrokOptions);
        }

        if (isWatching) {
            let watcherOptions = { ignoreDotFiles: true, ignoreUnreadableDir: true };

            watcher.watchTree(path, watcherOptions, (f, curr, prev) => {
                if (filter === "*") {
                    validFileChanged = true;
                } else {
                    if (typeof f == 'object' && prev === null && curr === null) {
                        console.log('[Watch]');
                        Object.keys(f).forEach((name) => {
                            let stat = f[name];
                            filesToWatch(name, stat, filter);
                        });
                        validFileChanged = true;
                    } else if (prev === null) {
                        let newFile = fs.statSync(f);
                        let extNewFile = pathNode.extname(f).split('.');

                        if (newFile['size'] == 0) {
                            validFileChanged = false;
                            // save file path to files to watch if ext is on filter
                            if (extNewFile.length > 1) {
                                let extExistOnFilter = filter.split(',').indexOf(extNewFile[1]);
                                if (extExistOnFilter != -1) {
                                    if (files.indexOf(f) == -1) {
                                        files.push(f);
                                        console.log('[Watch]');
                                        console.log(chalk.green.bold('- ') + chalk.green.bold(f));
                                    }
                                }
                            }
                        } else {
                            if (extNewFile.length > 1) {
                                let extExistOnFilter = filter.split(',').indexOf(extNewFile[1]);
                                if (extExistOnFilter != -1) {
                                    files.push(f);
                                    validFileChanged = true;
                                } else {
                                    validFileChanged = false;
                                }
                            } else {
                                validFileChanged = false;
                            }
                        }

                    } else if (curr.nlink === 0) {
                        let removedFile = files.indexOf(f);
                        if (removedFile != -1) {
                            files.splice(removedFile, 1);
                            console.log('[Remove]');
                            console.log(chalk.red.bold('- ') + chalk.red.bold(f));
                            validFileChanged = true;
                        } else {
                            validFileChanged = false;
                        }
                    } else {
                        let exist = files.indexOf(f);
                        (exist != -1) ? validFileChanged = true : validFileChanged = false;
                    }
                }

                if (validFileChanged) {
                    let reload = false;

                    if (svh !== null) {
                        svh.close();
                        reload = true;
                        options.reload = reload;
                        svh = app.server(path, options, callback_server(options));
                        app.setReload(true);
                        console.log(`[${new Date()}] reload server`);
                    } else {
                        //console.log(`[${new Date()}] starting server...`);
                        reload = false;
                        options.reload = false;
                        svh = app.server(path, options, callback_server(options));
                        app.setReload(false);
                    }
                }
            });
        } else {
            svh = app.server(path, options, callback_server(options));
        }
    });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.help();
} else {
    if (process.argv.slice(2)[0] !== 'serve') {
        program.help();
    }
}

let callback_server = (options) => {
    if (!options.reload) console.log(`node will serve you at http://${options.hostname}:${options.port}`);
};

let filesToWatch = (f, stat, filter) => {
    let ignoreDir = [];
    ignoreDir = f.match(/node_modules/);
    if (!ignoreDir) {
        if (filter === "*") return true;
        // push files based on valid files extension to watch
        let ext = pathNode.extname(f).split('.');
        filter.split(',').forEach((value) => {
            if (ext[ext.length - 1] != '') {
                if (ext[ext.length - 1] === value) {
                    console.log(chalk.green.bold('- ') + chalk.blue.bold(f));
                    files.push(f);
                }
            }
        })
    }
    return true;
}
