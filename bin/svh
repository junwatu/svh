#!/usr/bin/env node

var program = require('commander'),
    app = require('../'),
    rootPath = require('path'),
    message = require('../lib/middleware/message'),
    watcher = require('watch'),
    ngrok = require('../lib/ngrok'),
    defValue = {
        port: 3113,
        homepage: 'index',
        isWatching: 'yes',
        reload: 'no',
        log: 'no',
        ngrok: 'no',
        ngrokpath: '/usr/bin/ngrok'
    };

program
    .version(message.v());

program
    .command('serve [path]')
    .description('\tRun Node Serve Here! :D')
    .option('-l, --log <log>', 'default is no')
    .option('-p, --port <port>', 'startServer port. default port is 3113')
    .option('-m, --main <homepage>', 'main page to render. fill without file extension. support html only')
    .option('-w, --watch <isWatching>', 'watch project root directory for file changes. default yes')
    .option('-n, --ngrok <ngrok>', 'using ngrok to expose local web server to internet. default no')
    .option('-N, --ngrok-path <ngrokpath>', 'ngrok binary path. default to /usr/bin/ngrok')
    .option('-s, --subdomain <subdomain>', 'subdomain for ngrok')
    .option('-a, --auth <auth>', 'simple auth for ngrok')
    .action(function (path, program) {

        path === '.' ? path = rootPath.resolve('.') : path;

        var projectPath = rootPath.resolve(process.cwd(), path || '')
            , port = program.port || defValue.port
            , homepage = program.main || defValue.homepage
            , isWatching = program.watch || defValue.isWatching
            , log = program.log || defValue.log
            , useNgrok = program.ngrok || defValue.ngrok
            , ngrokPath = program.ngrokpath || defValue.ngrokpath
            , subdomain = program.subdomain || null
            , auth = program.auth || ''
            , options = {
                port: port,
                homepage: homepage,
                reload: defValue.reload,
                log: log
            }
            , svh = null
            , ngrokOptions;

        //show the head art
        message.head();

        if (useNgrok === 'yes') {

            ngrokOptions = {
                'ngrokpath':ngrokPath,
                'port': port,
                'subdomain': subdomain,
                'auth': auth,
                'configdir': projectPath
            };

            ngrok.expose(ngrokOptions);
        }


        // main process
        if (isWatching !== 'no') {
            watcherOptions = {
                ignoreDotFiles: true
            };

            watcher.watchTree(path, watcherOptions, function () {
                if (svh !== null) {
                    console.log('[info] closing server...');
                    svh.close();

                    options["reload"] = "yes";
                    console.log('[info] ' + new Date() + ' starting server...');
                    svh = app.server(path, options, callback_server(options.port));
                    app.setReload(1);

                } else {
                    console.log('[info] ' + new Date() + ' starting server...');

                    options["reload"] = "no";
                    svh = app.server(path, options, callback_server(options.port));
                    app.setReload(0);
                }
            });
        } else {
            svh = app.server(path, options, callback_server(options.port));
        }
    });

program.parse(process.argv);

var callback_server = function (port) {
    message.output('node will serve you at http://localhost:' + port);
};